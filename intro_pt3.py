from manim import *

class IntroIII(Scene):
    def construct(self):
        s = Text("Existem grandezas vetoriais e escalares", font_size=32)
        s.save_state()
        self.play(Write(s, reverse=True, remover=False))
        self.wait(1.6)
        self.play(s.animate.set_color(PURPLE).set_opacity(0.5).shift(2*LEFT).scale(3))
        self.play(s.animate.shift(5*DOWN).rotate(PI/4))
        vet = Tex(r'Vetoriais:', tex_template=TexFontTemplates.french_cursive, font_size=80)
        self.play(Write(vet))
        self.wait(2)
        self.play(vet.animate().shift(3*UP), run_time=1.4)
        self.wait(1)
        self.play(Restore(s), run_time=2)
        self.wait(1)
        explainVet = Text("Possuem direção, sentido e módulo", font_size=28)
        self.play(Transform(s, explainVet))
        self.wait(1.2)
        self.play(FadeOut(s), FadeOut(vet))
        self.wait(1)
        esc = Tex(r'Escalares:', tex_template=TexFontTemplates.french_cursive, font_size=80)
        self.play(SpinInFromNothing(esc, angle=2 * PI))
        self.wait(1)
        self.play(ApplyWave(esc, rate_func=linear, ripples=4))
        self.wait(1)
        self.play(esc.animate().shift(3*UP), run_time=1.4)
        self.wait(1)
        explainEsc = Text("Possuem apenas módulo", font_size=28)
        self.play(GrowFromCenter(explainEsc))
        self.wait(1.2)
        self.play(FadeOut(explainEsc), FadeOut(esc))
        self.wait(1)

        exVetTitle = Text("Exemplos de grandezas vetoriais:", font_size=32)
        exVetTxt = Text("Velocidade, Força, Aceleração, Deslocamento", font_size=26, slant=ITALIC)
        exVet = VGroup(exVetTitle, exVetTxt)
        self.play(Write(exVet, reverse=True, remover=False))
        self.play(exVet.animate.arrange(DOWN).shift(UP))
        self.wait(1)
        self.play(Indicate(exVetTxt, color=RED))
        self.wait(0.5)
        exEscTitle = Text("Exemplos de grandezas escalares:", font_size=32)
        exEscTxt = Text("Massa, Temperatura, Energia, Tempo", font_size=26, slant=ITALIC)
        exEsc = VGroup(exEscTitle, exEscTxt)
        self.play(Write(exEsc, reverse=False, remover=True))
        self.play(exEsc.animate.arrange(DOWN).next_to(exVet, DOWN, buff=0.5))
        self.wait(1)
        self.play(Indicate(exEscTxt, color=BLUE))
        self.wait(1.5)
        grandsGroup = VGroup(exVet, exEsc)
        self.play(FadeOut(grandsGroup))
        self.wait(0.6)

        quest = Text("O que ocorre com grandezas com módulos muito elevados ou pequenos?", font_size=24)
        self.play(Write(quest), run_time=0.6)
        self.play(quest.animate.to_edge(UP), run_time=0.6)
        self.wait(0.8)
        self.play(Indicate(quest))
        self.wait(0.5)
        expQuest = Text("Utilizamos a notação científica, para facilitar a escrita e a leitura", font_size=22)
        self.play(Write(expQuest, reverse=True, remover=False))
        self.play(expQuest.animate.next_to(quest, DOWN))
        self.wait(1.5)
        self.play(FadeOut(quest), FadeOut(expQuest))
        self.wait(1)
        
        exNotCient = Text("Como por exemplo a velocidade da luz no vácuo:", font_size=28)
        valNotCient = Tex(
            r"$300000000 = 3 \times 10^8$",
            tex_template=TexFontTemplates.french_cursive,
            font_size=80,
        )
        self.add(exNotCient)
        self.play(GrowFromCenter(exNotCient))
        self.wait(0.6)
        self.play(exNotCient.animate.to_edge(UP), run_time=0.8)
        self.wait(0.5)
        self.play(DrawBorderThenFill(valNotCient))
        self.wait(1)
        self.play(Indicate(valNotCient))
        self.wait(0.8)
        self.play(Unwrite(exNotCient, reverse=False, remover=True), Unwrite(valNotCient, reverse=False, remover=True))
        self.wait(1)
        obs = MarkupText(f'<span underline="double" underline_color="green">Observe que na notação científica</span> utilizamos <span fgcolor="{YELLOW}">SEMPRE na base 10</span>',
                         font_size=26)
        self.play(SpinInFromNothing(obs, angle=2*PI))
        self.wait(1)
        self.play(ApplyWave(obs, rate_func=linear, ripples=2))
        self.wait(1.45)
        self.play(obs.animate.shift(UP * 2.25))
        exNotCient2 = Text("Para números dentro do intervalo de 0 e 1, utilizamos expoente negativo", font_size=22)
        self.play(FadeIn(exNotCient2))
        self.play(exNotCient2.animate.next_to(obs, DOWN, buff=1.2))
        self.wait(1)
        exCarga = Text("Ex: Carga Elementar", font_size=30)
        self.play(Write(exCarga, reverse=False, remover=True))
        self.play(exCarga.animate.next_to(exNotCient2, DOWN, buff=1.2))
        cargEle = Tex(
            r"$1.6 \times 10^{-19}$",
            tex_template=TexFontTemplates.french_cursive,
            font_size=80,
        )
        self.play(Write(cargEle))
        self.play(exCarga.animate.shift(LEFT * 2.45))
        self.play(cargEle.animate.next_to(exCarga, RIGHT, buff=0.8))
        self.wait(1.5)
        self.play(FadeOut(obs), FadeOut(exNotCient2), FadeOut(exCarga), FadeOut(cargEle))